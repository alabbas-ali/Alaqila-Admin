<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of AdvertisementController
 *
 * @author abass
 */

namespace Advertisement\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Zend\View\Model\JsonModel;
use Advertisement\Model\Advertisement;
use Advertisement\Form\AdvertisementForm;
use Visit\Model\Visit;

class AdvertisementController extends AbstractActionController {

    protected $entityManager;

    public function getEntityManager() {
        if (null === $this->entityManager) {
            $this->entityManager = $this->getServiceLocator()->get('doctrine.entitymanager.orm_default');
        }
        return $this->entityManager;
    }

    public function indexAction() {
        return new ViewModel();
    }

    public function getAllAction() {
        $user=$this->zfcUserAuthentication()->getIdentity();
        if(!$user->isAdmin)
            $advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')->findby(array('user' => $user));
        else 
            $advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')->findAll();
        $data = array();
        //$i=0;
        foreach ($advertisements as $advertisement) {
            $item=$advertisement->getArrayCopy();
            $type='advertisement';
            $visits = $this->getEntityManager()->getRepository('Visit\Model\Visit')->findBy(array('type' => $type, 'type_id' => $item['id']));
            $item['visits']=count($visits);
            $data[] = $item;
        }
        return new JsonModel(array("data" => $data));
    }
    
    public function commentsAction(){
        $id = (int) $this->params()->fromRoute('id', 0);
        return new ViewModel(array('id' => $id));
    }
    public function getcommentsAction(){
        $id = (int) $this->params()->fromRoute('id', 0);
        if (!$id) {
            return $this->redirect()->toRoute('Advertisement');
        }
        $comments = $this->getEntityManager()->getRepository('Comment\Model\Comment')->findBy(array('type' => 'advertisement', 'type_id' => $id));
        //var_dump($comments);die;
        $data = array();
        //$i=0;
        foreach ($comments as $comment) {
            $data[] = $comment->getArrayCopy();
        }
        return new JsonModel(array("data" => $data));
    }
    
    public function getAllActiveAction() {
        $advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')->findBy(array('active' => '1'));
        $data = array();
        foreach ($advertisements as $advertisement) {
            $data[] = $advertisement->getArrayCopy();
        }
        return new JsonModel($data);
    }
    
    public function getPublicAction() {
        $num = (int) $this->params()->fromRoute('id', 0);
        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('t.id','COUNT(v.id) visits')
                ->from('Advertisement\Model\Advertisement', 't')
                ->leftJoin('Visit\Model\Visit', 'v',\Doctrine\ORM\Query\Expr\Join::WITH,"v.type_id=t.id")
                ->where("v.type='advertisement'")
                ->groupBy('t.id')
                ->orderBy('visits', 'DESC')
                ->setMaxResults( $num );

        $query = $qb->getQuery();
        //var_dump($query);die;
        $result=$qb->getQuery()->getResult();
        $data = array();
        foreach ($result as $row) {
            $advertisement = $this->getEntityManager()->find('Advertisement\Model\Advertisement', $row['id']);
            $data[] = $advertisement->getArrayCopy();
            
        }
        return new JsonModel($data);
        
        /*
         * 
         * $sql = "SELECT advertisement.id, COUNT(v.id) visits"
                . "FROM advertisement"
                . "LEFT JOIN visit AS v on v.type_id=advertisement.id and v.type='advertisement'"
                . "GROUP BY advertisement.id"
                . "order by visits DESC"
                . "limit '$num'";
         * 
         */
        /*$advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')
                ->findby(array('active' => 1));
        $data = array();
        foreach ($advertisements as $advertisement) {
            $data[] = $advertisement->getArrayCopy();
        }
        return new JsonModel($data);
        */
    }
    
    public function getResentAdvertisementAction(){
        $advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')
                ->findby(array('active' => 1));
        $data = array();
        foreach ($advertisements as $advertisement) {
            $data[] = $advertisement->getArrayCopy();
        }
        return new JsonModel($data);
    }
    
    public function getByUserAction(){
        $userID = (int) $this->params()->fromRoute('id', 0);
        $user = $this->getEntityManager()->find('ZfcUserOver\Model\User', $userID);
        $advertisements = $this->getEntityManager()->getRepository('Advertisement\Model\Advertisement')
                ->findby(array('active' => 1 , 'user' => $user));
        $data = array();
        foreach ($advertisements as $advertisement) {
            $data[] = $advertisement->getArrayCopy();
        }
        return new JsonModel($data);
    }
    
    public function getByIDAction() {
        $id = (int) $this->params()->fromRoute('id', 0);
        $visit = new Visit();
        $visit->ip_address=$_SERVER['REMOTE_ADDR'];
        $visit->type='advertisement';
        $visit->type_id=$id;
        $visit->visit_date=date('Y-m-d H:i:s');
        $this->getEntityManager()->persist($visit);
        $this->getEntityManager()->flush();
                
        $advertisement = $this->getEntityManager()->find('Advertisement\Model\Advertisement', $id);
        $data = array();
        $data[] = $advertisement->getArrayCopy();
        return new JsonModel($data);
    }

    public function addAction() {
        $form = new AdvertisementForm($this->getEntityManager(),$this->zfcUserAuthentication()->getIdentity()->getId());
        $form->get('submit')->setValue('Add');

        $request = $this->getRequest();
        if ($request->isPost()) {
            $advertisement = new Advertisement();
            $form->setInputFilter($advertisement->getInputFilter());
            $form->setData($request->getPost());

            if ($form->isValid()) {
                $data = $form->getData();
                $data['country'] = $this->getEntityManager()->getRepository('Countries\Model\Country')
                        ->findby(array('id' => $data['country']));
                $data['country'] = $data['country'][0];                
                
                $user=$this->zfcUserAuthentication()->getIdentity();
                
                $data['user'] = $this->getEntityManager()->getRepository('ZfcUserOver\Model\User')
                        ->findby(array('id' => $user));
                $data['user'] = $data['user'][0];                
                $advertisement->exchangeArray($data);
                if($user->isAdmin)
                    $advertisement->active=1;
                else
                    $advertisement->active=0;
                
                $this->getEntityManager()->persist($advertisement);
                $this->getEntityManager()->flush();

                // Redirect to list of albums
                return $this->redirect()->toRoute('Advertisement');
            }
        }
        return array('form' => $form);
    }

    public function editAction() {
        $id = (int) $this->params()->fromRoute('id', 0);
        if (!$id) {
            return $this->redirect()->toRoute('Advertisement', array(
                        'action' => 'add'
            ));
        }

        $advertisement = $this->getEntityManager()->find('Advertisement\Model\Advertisement', $id);
        //echo '<pre>';print_r($advertisement);die;
        $advertisement->country=$advertisement->country->id;
        $advertisement->user=$advertisement->user->id;
        
        if (!$advertisement) {
            return $this->redirect()->toRoute('Advertisement', array(
                        'action' => 'index'
            ));
        }

        $form = new AdvertisementForm($this->getEntityManager(),$this->zfcUserAuthentication()->getIdentity()->getId());
        $form->bind($advertisement);
        $form->get('submit')->setAttribute('value', 'Edit');

        $request = $this->getRequest();
        if ($request->isPost()) {
            $form->setInputFilter($advertisement->getInputFilter());
            $form->setData($request->getPost());

            if ($form->isValid()) {
                $advertisement->country=$this->getEntityManager()->find('Countries\Model\Country', $advertisement->country);
                $advertisement->user=$this->getEntityManager()->find('ZfcUserOver\Model\User', $advertisement->user);
                //echo '<pre>';print_r($advertisement->country);die;
                $this->getEntityManager()->flush();

                // Redirect to list of albums
                return $this->redirect()->toRoute('Advertisement');
            }
        }

        return array(
            'id' => $id,
            'form' => $form,
        );
    }

    public function deleteAction() {
        $id = (int) $this->params()->fromRoute('id', 0);
        
        if ($id==1) {
            return new JsonModel(array("done" => 'false', 'message' => 'Sorry But Can not Delete This'));
        }
        
        if (!$id) {
            return new JsonModel(array("done" => 'false', 'message' => 'Sorry But Can not Delete This'));
        }
        
        $advertisement = $this->getEntityManager()->find('Advertisement\Model\Advertisement', $id);
        if ($advertisement) {
            $this->getEntityManager()->remove($advertisement);
            $this->getEntityManager()->flush();
            return new JsonModel(array("done" => 'true', 'message' => 'Advertisement Have been Deletet'));
        }
        return new JsonModel(array("done" => 'false', 'message' => 'Sorry But Can not Delete This'));
    }
    public function chstatusAction() {
        $id = (int) $this->params()->fromRoute('id', 0);
        if (!$id) {
            return new JsonModel(array("done" => 'false', 'message' => 'Sorry But Can not Edit This'));
        }
        
        $advertisement = $this->getEntityManager()->find('Advertisement\Model\Advertisement', $id);
        if ($advertisement) {
            $advertisement->active=!$advertisement->active;
            $this->getEntityManager()->flush();
            return new JsonModel(array("done" => 'true', 'message' => 'Advertisement Has been Edited'));
        }
        return new JsonModel(array("done" => 'false', 'message' => 'Sorry But Can not Edit This'));
    }
}
